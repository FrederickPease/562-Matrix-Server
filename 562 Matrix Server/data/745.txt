package com.rs.net.encoders;

import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelFutureListener;

import com.rs.Settings;
import com.rs.game.Animation;
import com.rs.game.DynamicRegion;
import com.rs.game.Entity;
import com.rs.game.Graphics;
import com.rs.game.Region;
import com.rs.game.World;
import com.rs.game.WorldObject;
import com.rs.game.WorldTile;
import com.rs.game.item.FloorItem;
import com.rs.game.item.Item;
import com.rs.game.item.ItemsContainer;
import com.rs.game.npc.NPC;
import com.rs.game.player.ChatMessage;
import com.rs.game.player.HintIcon;
import com.rs.game.player.Player;
import com.rs.game.player.PublicChatMessage;
import com.rs.game.player.QuickChatMessage;
import com.rs.game.player.content.FriendChatsManager;
import com.rs.io.OutputStream;
import com.rs.net.Session;
import com.rs.utils.Logger;
import com.rs.utils.MapArchiveKeys;
import com.rs.utils.Utils;
import com.rs.utils.huffman.Huffman;

public class WorldPacketsEncoder extends Encoder {

	private Player player;

	public WorldPacketsEncoder(Session session, Player player) {
		super(session);
		this.player = player;
	}

	public Player getPlayer() {
		return player;
	}

	public void sendPlayerUnderNPCPriority(boolean priority) {
		OutputStream stream = new OutputStream(2);
		stream.writePacket(player, 130);
		stream.writeByte128(priority ? 1 : 0);
		session.write(stream);
	}

	public void sendHintIcon(HintIcon icon) {
		OutputStream stream = new OutputStream(15);
		stream.writePacket(player, 54);
		stream.writeByte((icon.getTargetType() & 0x1f) | (icon.getIndex() << 5));
		if (icon.getTargetType() == 0)
			stream.skip(13);
		else {
			stream.writeByte(icon.getArrowType());
			if (icon.getTargetType() == 1 || icon.getTargetType() == 10) {
				stream.writeShort(icon.getTargetIndex());
				stream.writeShort(2500); // how often the arrow flashes, 2500 ideal, 0 never
				stream.skip(4);
			} else if ((icon.getTargetType() >= 2 && icon.getTargetType() <= 6)) { // directions
				stream.writeByte(icon.getPlane()); // unknown
				stream.writeShort(icon.getCoordX());
				stream.writeShort(icon.getCoordY());
				stream.writeByte(icon.getDistanceFromFloor() * 4 >> 2);
				stream.writeShort(-1); //distance to start showing on minimap, 0 doesnt show, -1 infinite
			}
			stream.writeInt(icon.getModelId());
		}
		session.write(stream);

	}


	public void sendCameraShake(int slotId, int a, int b, int c, int d) {
		OutputStream stream = new OutputStream(7);
		stream.writePacket(player, 49);
		stream.writeByte128(c);
		stream.write128Byte(a); 
		stream.write128Byte(slotId);
		stream.writeShort(d);
		stream.writeByte128(b); 
		session.write(stream);
	}

	public void sendStopCameraShake() {
		OutputStream stream = new OutputStream(1);
		stream.writePacket(player, 28);
		session.write(stream);
	}

	public void sendModelOnIComponent(int interfaceId, int componentId,
			int modelId) {
		OutputStream stream = new OutputStream(9);
		stream.writePacket(player, 67);
		stream.writeInt(modelId);
		stream.writeInt(interfaceId << 16 | componentId);
		session.write(stream);
	}

	public void sendHideIComponent(int interfaceId, int componentId,
			boolean hidden) {
		OutputStream stream = new OutputStream(6);
		stream.writePacket(player, 109);
		stream.writeByteC(hidden ? 1 : 0);
		stream.writeIntLE(interfaceId << 16 | componentId);
		session.write(stream);
	}

	public void sendRemoveGroundItem(FloorItem item) {
		OutputStream stream = createWorldTileStream(item.getTile());
		int localX = item.getTile().getLocalX(
				player.getLastLoadedMapRegionTile(), player.getMapSize());
		int localY = item.getTile().getLocalY(
				player.getLastLoadedMapRegionTile(), player.getMapSize());
		int offsetX = localX - ((localX >> 3) << 3);
		int offsetY = localY - ((localY >> 3) << 3);
		stream.writePacket(player, 37);
		stream.writeByte128((offsetX << 4) | offsetY);
		stream.writeShortLE(item.getId());
		session.write(stream);

	}

	public void sendGroundItem(FloorItem item) {
		OutputStream stream = createWorldTileStream(item.getTile());
		int localX = item.getTile().getLocalX(
				player.getLastLoadedMapRegionTile(), player.getMapSize());
		int localY = item.getTile().getLocalY(
				player.getLastLoadedMapRegionTile(), player.getMapSize());
		int offsetX = localX - ((localX >> 3) << 3);
		int offsetY = localY - ((localY >> 3) << 3);
		stream.writePacket(player, 77);
		stream.writeShort(item.getId());
		stream.write128Byte((offsetX << 4) | offsetY);
		stream.writeShort128(item.getAmount());
		session.write(stream);
	}

	public void sendProjectile(Entity receiver, WorldTile startTile,
			WorldTile endTile, int gfxId, int startHeight, int endHeight,
			int speed, int delay, int curve, int startDistanceOffset,
			int creatorSize) {
		OutputStream stream = createWorldTileStream(startTile);
		stream.writePacket(player, 12);
		int localX = startTile.getLocalX(player.getLastLoadedMapRegionTile(),
				player.getMapSize());
		int localY = startTile.getLocalY(player.getLastLoadedMapRegionTile(),
				player.getMapSize());
		int offsetX = localX - ((localX >> 3) << 3);
		int offsetY = localY - ((localY >> 3) << 3);
		stream.writeByte((offsetX << 3) | offsetY);
		stream.writeByte(endTile.getX() - startTile.getX());
		stream.writeByte(endTile.getY() - startTile.getY());
		stream.writeShort(receiver == null ? 0
				: (receiver instanceof Player ? -(receiver.getIndex() + 1)
						: receiver.getIndex() + 1));
		stream.writeShort(gfxId);
		stream.writeByte(startHeight);
		stream.writeByte(endHeight);
		stream.writeShort(delay);
		int duration = (Utils.getDistance(startTile.getX(), startTile.getY(),
				endTile.getX(), endTile.getY()) * 30 / ((speed / 10) < 1 ? 1
				: (speed / 10)))
				+ delay;
		stream.writeShort(duration);
		stream.writeByte(curve);
		stream.writeShort(creatorSize * 64 + startDistanceOffset * 64);
		stream.writeShort(receiver == null ? 0
				: (receiver instanceof Player ? -(receiver.getIndex() + 1)
						: receiver.getIndex() + 1)); //new
		session.write(stream);

	}

	public void sendUnlockIComponentOptionSlots(int interfaceId,
			int componentId, int fromSlot, int toSlot, int... optionsSlots) {
		int settingsHash = 0;
		for (int slot : optionsSlots)
			settingsHash |= 2 << slot;
		sendIComponentSettings(interfaceId, componentId, fromSlot, toSlot,
				settingsHash);
	}

	/*
	 *TODO check later
	 */
	public void sendIComponentSettings(int interfaceId, int componentId,
			int fromSlot, int toSlot, int settingsHash) {
		OutputStream stream = new OutputStream(13);
		stream.writePacket(player, 156);
		stream.writeIntV2(settingsHash);
		stream.writeIntV1(interfaceId << 16 | componentId);
		stream.writeShort(fromSlot);
		stream.writeShort128(toSlot);
		session.write(stream);
	}

	public void sendInterFlashScript(int interfaceId,
			int componentId, int width, int height, int slot) {
		Object[] parameters = new Object[4];
		int index = 0;
		parameters[index++] = slot;
		parameters[index++] = height;
		parameters[index++] = width;
		parameters[index++] = interfaceId << 16 | componentId;
		sendRunScript(143, parameters); 
	}
	
	public void sendInterSetItemsOptionsScript(int interfaceId,
			int componentId, int key, int width, int height, String... options) {
		sendInterSetItemsOptionsScript(interfaceId, componentId, key, false, width, height, options);
	}
	
	public void sendInterSetItemsOptionsScript(int interfaceId,
			int componentId, int key, boolean negativeKey, int width, int height, String... options) {
		Object[] parameters = new Object[6 + options.length];
		int index = 0;
		for (int count = options.length - 1; count >= 0; count--)
			parameters[index++] = options[count];
		parameters[index++] = -1; // dunno but always this
		parameters[index++] = 0;// dunno but always this, maybe startslot?
		parameters[index++] = height;
		parameters[index++] = width;
		parameters[index++] = key;
		parameters[index++] = interfaceId << 16 | componentId;
		sendRunScript(negativeKey ? 695 : 150, parameters); // scriptid 150 does that the method
										// name says*/
	}
	
	public void sendSummoningItemsOptionsScript(int interfaceId,
			int componentId, int slotLength, int width, int height, String... options) {
		Object[] parameters = new Object[5 + options.length];
		int index = 0;
		parameters[index++] = slotLength; 
		parameters[index++] = 1; // dunno
		for (int count = options.length - 1; count >= 0; count--)
			parameters[index++] = options[count];
		parameters[index++] = height;
		parameters[index++] = width;
		parameters[index++] = interfaceId << 16 | componentId;
		sendRunScript(757, parameters); 
	}
	
	public void sendInputNameScript(String message) {
		sendRunScript(109, new Object[] { message });
	}
	
	public void sendInputIntegerScript(String message) {
		sendRunScript(108, new Object[] { message });
	}
	
	public void sendInputLongTextScript(String message) {
		sendRunScript(110, new Object[] { message });
	}
	
	public void sendRunScriptBlank(int scriptId) {
		sendRunScript(scriptId, new Object[] {});
	}
	
	public void sendRunScript(int scriptId, Object... params) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 138);
		String parameterTypes = "";
		if (params != null) {
			for (int count = params.length - 1; count >= 0; count--) {
				if (params[count] instanceof String)
					parameterTypes += "s"; // string
				else
					parameterTypes += "i"; // integer
			}
		}
		stream.writeString(parameterTypes);
		if (params != null) {
			int index = 0;
			for (int count = parameterTypes.length() - 1; count >= 0; count--) {
				if (parameterTypes.charAt(count) == 's')
					stream.writeString((String) params[index++]);
				else
					stream.writeInt((Integer) params[index++]);
			}
		}
		stream.writeInt(scriptId);
		stream.endPacketVarShort();
		session.write(stream);
	}

	public void sendGlobalConfig(int id, int value) {
		if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE)
			sendGlobalConfig2(id, value);
		else
			sendGlobalConfig1(id, value);
	}

	public void sendGlobalConfig1(int id, int value) {
		OutputStream stream = new OutputStream(4);
		stream.writePacket(player, 154);
		stream.writeShort(id);
		stream.writeByte128(value);
		session.write(stream);
	}

	public void sendGlobalConfig2(int id, int value) {
		OutputStream stream = new OutputStream(7);
		stream.writePacket(player, 102);
		stream.writeIntV1(value);
		stream.writeShort128(id);
		session.write(stream);
	}

	@Deprecated
	public void sendClientVarp(int id, int value) {
		if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE)
			sendClientVarp2(id, value);
		else
			sendClientVarp1(id, value);
	}

	@Deprecated
	public void sendClientVarpBit(int id, int value) {
		if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE)
			sendClientVarpBit2(id, value);
		else
			sendClientVarpBit1(id, value);
	}

	public void sendClientVarp1(int id, int value) {
		OutputStream stream = new OutputStream(4);
		stream.writePacket(player, 68);
		stream.writeByte(value);
		stream.writeShort128(id);
		session.write(stream);
	}

	public void sendClientVarp2(int id, int value) {
		OutputStream stream = new OutputStream(7);
		stream.writePacket(player, 23);
		stream.writeShortLE128(id);
		stream.writeIntV2(value);
		session.write(stream);
	}

	public void sendClientVarpBit1(int fileId, int value) {
		OutputStream stream = new OutputStream(4);
		stream.writePacket(player, 136);
		stream.writeByteC(value);
		stream.writeShortLE128(fileId);
		session.write(stream);
	}

	public void sendClientVarpBit2(int fileId, int value) {
		OutputStream stream = new OutputStream(7);
		stream.writePacket(player, 9);
		stream.writeIntV1(value);
		stream.writeShortLE(fileId);
		session.write(stream);
	}

	public void sendRunEnergy() {
		OutputStream stream = new OutputStream(2);
		stream.writePacket(player, 11);
		stream.writeByte(player.getRunEnergy());
		session.write(stream);
	}

	public void sendIComponentText(int interfaceId, int componentId, String text) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 56);
		stream.writeString(text);
		stream.writeIntV1(interfaceId << 16 | componentId);
		stream.endPacketVarShort();
		session.write(stream);

	}

	public void sendIComponentAnimation(int emoteId, int interfaceId,
			int componentId) {
		OutputStream stream = new OutputStream(9);
		stream.writePacket(player, 142);
		stream.writeIntLE(interfaceId << 16 | componentId);
		stream.writeIntV2(emoteId);
		session.write(stream);

	}

	public void sendItemOnIComponent(int interfaceid, int componentId, int id,
			int amount) {
		OutputStream stream = new OutputStream(11);
		stream.writePacket(player, 107);
		stream.writeShortLE128(id);
		stream.writeIntV1(interfaceid << 16 | componentId);
		stream.writeIntV1(amount);
		session.write(stream);

	}

	public void sendEntityOnIComponent(boolean isPlayer, int entityId,
			int interfaceId, int componentId) {
		if (isPlayer)
			sendMyPlayerOnIComponent(interfaceId, componentId);
		else
			sendNPCOnIComponent(interfaceId, componentId, entityId);
	}

	public void sendWorldTile(WorldTile tile) {
		session.write(createWorldTileStream(tile));
	}
	
	public OutputStream createWorldTileStream(WorldTile tile) {
		OutputStream stream = new OutputStream(4);
		stream.writePacket(player, 88);
		stream.write128Byte(tile.getLocalX(player.getLastLoadedMapRegionTile(),
				player.getMapSize()) >> 3);
		stream.writeByte(tile.getPlane());
		stream.write128Byte(tile.getLocalY(player.getLastLoadedMapRegionTile(),
				player.getMapSize()) >> 3);
		return stream;
	}

	public void sendObjectAnimation(WorldObject object, Animation animation) {
		OutputStream stream = new OutputStream(10);
		stream.writePacket(player, 93);
		stream.writeInt(object.getTileHash());
		stream.writeByteC((object.getType() << 2)
				+ (object.getRotation() & 0x3));
		stream.writeIntV1(animation.getIds()[0]);
		session.write(stream);
	}

	public void sendTileMessage(String message, WorldTile tile, int color) {
		sendTileMessage(message, tile, 5000, 255, color);
	}

	public void sendTileMessage(String message, WorldTile tile, int delay,
			int height, int color) {
		OutputStream stream = createWorldTileStream(tile);
		stream.writePacketVarByte(player, 152);
		stream.skip(1);
		int localX = tile.getLocalX(player.getLastLoadedMapRegionTile(),
				player.getMapSize());
		int localY = tile.getLocalY(player.getLastLoadedMapRegionTile(),
				player.getMapSize());
		int offsetX = localX - ((localX >> 3) << 3);
		int offsetY = localY - ((localY >> 3) << 3);
		stream.writeByte((offsetX << 4) | offsetY);
		stream.writeShort(delay / 30);
		stream.writeByte(height);
		stream.write24BitInteger(color);
		stream.writeString(message);
		stream.endPacketVarByte();
		session.write(stream);
	}
	public void sendSpawnedObject(WorldObject object) {
		OutputStream stream = createWorldTileStream(object);
		int localX = object.getLocalX(player.getLastLoadedMapRegionTile(),
				player.getMapSize());
		int localY = object.getLocalY(player.getLastLoadedMapRegionTile(),
				player.getMapSize());
		int offsetX = localX - ((localX >> 3) << 3);
		int offsetY = localY - ((localY >> 3) << 3);
		stream.writePacket(player, 151);
		stream.writeIntV2(object.getId());
		stream.write128Byte((offsetX << 4) | offsetY);
		stream.writeByte((object.getType() << 2) + (object.getRotation() & 0x3));
		session.write(stream);

	}

	public void sendDestroyObject(WorldObject object) {
		OutputStream stream = createWorldTileStream(object);
		int localX = object.getLocalX(player.getLastLoadedMapRegionTile(),
				player.getMapSize());
		int localY = object.getLocalY(player.getLastLoadedMapRegionTile(),
				player.getMapSize());
		int offsetX = localX - ((localX >> 3) << 3);
		int offsetY = localY - ((localY >> 3) << 3);
		stream.writePacket(player, 100);
		stream.writeByte128((offsetX << 4) | offsetY);
		stream.writeByte((object.getType() << 2) + (object.getRotation() & 0x3));
		session.write(stream);

	}

	public void sendMyPlayerOnIComponent(int interfaceId, int componentId) {
		OutputStream stream = new OutputStream(5);
		stream.writePacket(player, 103);
		stream.writeIntV2(interfaceId << 16 | componentId);
		session.write(stream);
	}
	
	public void sendPlayerOnIComponent(int interfaceId, int componentId, int playerIndex) {
		OutputStream stream = new OutputStream(11);
		stream.writePacket(player, 21);
		stream.writeIntLE(interfaceId << 16 | componentId);
		stream.writeShortLE(playerIndex);
		stream.writeIntV1(0); //rs sends normaly 0 too for myplayer on inter
		session.write(stream);
	}

	public void sendNPCOnIComponent(int interfaceId, int componentId, int npcId) {
		OutputStream stream = new OutputStream(9);
		stream.writePacket(player, 150);
		stream.writeIntV1(interfaceId << 16 | componentId);
		stream.writeIntV1(npcId);
		session.write(stream);

	}

	public void sendRandomOnIComponent(int interfaceId, int componentId, int id) {
		/* OutputStream stream = new OutputStream();
		 stream.writePacket(player, 235);
		 stream.writeShort(id);
		 stream.writeIntV1(interfaceId << 16 | componentId); 
		 session.write(stream);*/
	}

	public void sendFaceOnIComponent(int interfaceId, int componentId,
			int look1, int look2, int look3) {
		/*
		 * OutputStream stream = new OutputStream(); stream.writePacket(player, 192);
		 * stream.writeIntV2(interfaceId << 16 | componentId);
		 * stream.writeShortLE128(interPacketsCount++);
		 * stream.writeShortLE128(look1); stream.writeShortLE128(look2);
		 * stream.writeShort128(look2); //session.write(stream);
		 */
	}

	public void sendFriendsChatChannel() {
		FriendChatsManager manager = player.getCurrentFriendChat();
		OutputStream stream = new OutputStream(manager == null ? 3
				: manager.getDataBlock().length + 3);
		stream.writePacketVarShort(player, 6);
		if (manager != null)
			stream.writeBytes(manager.getDataBlock());
		stream.endPacketVarShort();
		session.write(stream);
	}

	public void sendFriends() {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 31);
		for(String username : player.getFriendsIgnores().getFriends()) {
			String displayName;
			Player p2 = World.getPlayerByDisplayName(username);
			if (p2 != null)
				displayName = p2.getDisplayName();
			else
				displayName = Utils.formatPlayerNameForDisplay(username);
			player.getPackets().sendFriend(
					Utils.formatPlayerNameForDisplay(username), displayName, 1,
					p2 != null && player.getFriendsIgnores().isOnline(p2), false, stream);
		}
		stream.endPacketVarShort();
		session.write(stream);
	}
	
	public void sendFriend(String username, String displayName, int world,
			boolean putOnline, boolean warnMessage) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 31);
		sendFriend(username, displayName, world, putOnline, warnMessage, stream);
		stream.endPacketVarShort();
		session.write(stream);
	}
	
	public void sendFriend(String username, String displayName, int world,
			boolean putOnline, boolean warnMessage, OutputStream stream) {
		stream.writeByte(warnMessage ? 0 : 1);
		stream.writeString(displayName);
		stream.writeString(displayName.equals(username) ? "" : username);
		stream.writeShort(putOnline ? world : 0);
		stream.writeByte(player.getFriendsIgnores().getRank(Utils.formatPlayerNameForProtocol(username)));
		stream.writeByte(0);
		if (putOnline) {
			stream.writeString(Settings.SERVER_NAME);
			stream.writeByte(0);
			stream.writeInt(0); //unknown new stream
		}
	}

	public void sendIgnores() {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 2);
		for(String username : player.getFriendsIgnores().getIgnores()) {
			String display;
			Player p2 = World.getPlayerByDisplayName(username);
			if (p2 != null)
				display = p2.getDisplayName();
			else
				display = Utils.formatPlayerNameForDisplay(username);
			String name = Utils.formatPlayerNameForDisplay(username);
			sendIgnore(name, display, false, stream);
		}
		stream.endPacketVarShort();
		session.write(stream);
	}
	
	public void sendIgnore(String username, String displayName,  boolean addNew, OutputStream stream) {
		stream.writeByte(addNew ? 0x2 : 0); //flag
		stream.writeString(displayName.equals(username) ? username : displayName);
		stream.writeString(displayName.equals(username) ? "" : username);
	}
	
	public void sendIgnore(String name, String display, boolean updateName) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 2);
		sendIgnore(name, display, true, stream);
		stream.endPacketVarShort();
		session.write(stream);
	}

	public void sendPrivateMessage(String username, ChatMessage message) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 70);
		stream.writeString(username);
		Huffman.sendEncryptMessage(stream, message.getMessage(player.isFilteringProfanity()));
		stream.endPacketVarShort();
		session.write(stream);
	}

	public void sendGameBarStages() {
		player.getClientVarpsManager().sendClientVarp(1772, player.getClanStatus());
		player.getClientVarpsManager().sendClientVarp(1773, player.getFriendsIgnores().getFriendsChatStatus());
		player.getClientVarpsManager().sendClientVarp(1774, player.getAssistStatus()); 
		player.getClientVarpsManager().sendClientVarpBit(5999, player.isFilterGame() ? 1 : 0);
		sendOtherGameBarStages();
		sendPrivateGameBarStage();
	}
	
	public void sendOtherGameBarStages() {
		OutputStream stream = new OutputStream(3);
		stream.writePacket(player, 58);
		stream.writeByte128(player.getPublicStatus()); 
		stream.write128Byte(player.getTradeStatus());
		session.write(stream);
	}

	public void sendPrivateGameBarStage() {
		OutputStream stream = new OutputStream(2);
		stream.writePacket(player, 82);
		stream.writeByte(player.getFriendsIgnores().getPrivateStatus());
		session.write(stream);
	}

	public void receivePrivateMessage(String name, String display, int rights,
			ChatMessage message) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 55);
		stream.writeByte(name.equals(display) ? 0 : 1);
		stream.writeString(display);
		if (!name.equals(display))
			stream.writeString(name);
		for (int i = 0; i < 5; i++)
			stream.writeByte(Utils.getRandom(255));
		stream.writeByte(rights);
		Huffman.sendEncryptMessage(stream, message.getMessage(player.isFilteringProfanity()));
		stream.endPacketVarShort();
		session.write(stream);
	}

	// 131 clan chat quick message

	public void receivePrivateChatQuickMessage(String name, String display,
			int rights, QuickChatMessage message) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarByte(player, 98);
		stream.writeByte(name.equals(display) ? 0 : 1);
		stream.writeString(display);
		if (!name.equals(display))
			stream.writeString(name);
		for (int i = 0; i < 5; i++)
			stream.writeByte(Utils.getRandom(255));
		stream.writeByte(rights);
		stream.writeShort(message.getFileId());
		if (message.getMessage(false) != null)
			stream.writeBytes(message.getMessage(false).getBytes());
		stream.endPacketVarByte();
		session.write(stream);
	}

	public void sendPrivateQuickMessageMessage(String username,
			QuickChatMessage message) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarByte(player, 87);
		stream.writeString(username);
		stream.writeShort(message.getFileId());
		if (message.getMessage(false) != null)
			stream.writeBytes(message.getMessage(false).getBytes());
		stream.endPacketVarByte();
		session.write(stream);
	}

	public void receiveFriendChatMessage(String name, String display,
			int rights, String chatName, ChatMessage message) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarByte(player, 40);
		stream.writeByte(name.equals(display) ? 0 : 1);
		stream.writeString(display);
		if (!name.equals(display))
			stream.writeString(name);
		stream.writeLong(Utils.stringToLong(chatName));
		for (int i = 0; i < 5; i++)
			stream.writeByte(Utils.getRandom(255));
		stream.writeByte(rights);
		Huffman.sendEncryptMessage(stream, message.getMessage(player.isFilteringProfanity()));
		stream.endPacketVarByte();
		session.write(stream);
	}

	public void receiveFriendChatQuickMessage(String name, String display,
			int rights, String chatName, QuickChatMessage message) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarByte(player, 43);
		stream.writeByte(name.equals(display) ? 0 : 1);
		stream.writeString(display);
		if (!name.equals(display))
			stream.writeString(name);
		stream.writeLong(Utils.stringToLong(chatName));
		for (int i = 0; i < 5; i++)
			stream.writeByte(Utils.getRandom(255));
		stream.writeByte(rights);
		stream.writeShort(message.getFileId());
		if (message.getMessage(false) != null)
			stream.writeBytes(message.getMessage(false).getBytes());
		stream.endPacketVarByte();
		session.write(stream);
	}

	/*
	 * dynamic map region
	 */
	public void sendDynamicMapRegion(boolean sendLswp) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 94);
		if (sendLswp)
			player.getLocalPlayerUpdate().init(stream);
		int regionX = player.getChunkX();
		int regionY = player.getChunkY();
		stream.writeByte(player.getMapSize());
		stream.write128Byte(player.isForceNextMapLoadRefresh() ? 0x1 : 0);
		stream.writeByteC(2); 
		stream.writeShortLE(regionX);
		stream.writeShort128(regionY);
		stream.initBitAccess();
		int mapHash = Settings.MAP_SIZES[player.getMapSize()] >> 4;
		int[] realRegionIds = new int[4 * mapHash * mapHash];
		int realRegionIdsCount = 0;
		for (int plane = 0; plane < 4; plane++) {
			for (int thisRegionX = (regionX - mapHash); thisRegionX <= ((regionX + mapHash)); thisRegionX++) { // real
																												// x
																												// calcs
				for (int thisRegionY = (regionY - mapHash); thisRegionY <= ((regionY + mapHash)); thisRegionY++) { // real
																													// y
																													// calcs
					int regionId = (((thisRegionX / 8) << 8) + (thisRegionY / 8));
					Region region = World.getRegions().get(regionId);
					int realRegionX;
					int realRegionY;
					int realPlane;
					int rotation;
					if (region instanceof DynamicRegion) { // generated map
						DynamicRegion dynamicRegion = (DynamicRegion) region;
						int[] regionCoords = dynamicRegion.getRegionCoords()[plane][thisRegionX
								- ((thisRegionX / 8) * 8)][thisRegionY
								- ((thisRegionY / 8) * 8)];
						realRegionX = regionCoords[0];
						realRegionY = regionCoords[1];
						realPlane = regionCoords[2];
						rotation = regionCoords[3];
					} else { // real map
						// base region + difference * 8 so gets real region
						// coords
						realRegionX = thisRegionX;
						realRegionY = thisRegionY;
						realPlane = plane;
						rotation = 0;// no rotation
					}
					// invalid region, not built region
					if (realRegionX == 0 || realRegionY == 0)
						stream.writeBits(1, 0);
					else {
						stream.writeBits(1, 1);
						stream.writeBits(26, (rotation << 1)
								| (realPlane << 24) | (realRegionX << 14)
								| (realRegionY << 3));
						int realRegionId = (((realRegionX / 8) << 8) + (realRegionY / 8));
						boolean found = false;
						for (int index = 0; index < realRegionIdsCount; index++)
							if (realRegionIds[index] == realRegionId) {
								found = true;
								break;
							}
						if (!found)
							realRegionIds[realRegionIdsCount++] = realRegionId;
					}

				}
			}
		}
		stream.finishBitAccess();
		for (int index = 0; index < realRegionIdsCount; index++) {
			int[] xteas = MapArchiveKeys
					.getMapKeys(realRegionIds[index]);
			if (xteas == null)
				xteas = new int[4];
			for (int keyIndex = 0; keyIndex < 4; keyIndex++)
				stream.writeInt(xteas[keyIndex]);
		}
		stream.endPacketVarShort();
		session.write(stream);
	}

	/*
	 * normal map region
	 */
	public void sendMapRegion(boolean sendLswp) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 62);
		if (sendLswp)
			player.getLocalPlayerUpdate().init(stream);
		stream.writeByte(player.getMapSize());
		stream.writeByteC(player.isForceNextMapLoadRefresh() ? 1 : 0);
		stream.writeShortLE128(player.getChunkX());
		stream.writeShortLE128(player.getChunkY());
		for (int regionId : player.getMapRegionsIds()) {
			int[] xteas = MapArchiveKeys.getMapKeys(regionId);
			if (xteas == null)
				xteas = new int[4];
			for (int index = 0; index < 4; index++)
				stream.writeInt(xteas[index]);
		}
		stream.endPacketVarShort();
		session.write(stream);
	}

	public void sendCutscene(int id) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 142);
		stream.writeShort(id);
		stream.writeShort(143); // xteas count
		for (int count = 0; count < 20; count++)
			// xteas
			for (int i = 0; i < 4; i++)
				stream.writeInt(0);
		byte[] appearence = player.getAppearence().getAppeareanceData();
		stream.writeByte(appearence.length);
		stream.writeBytes(appearence);
		stream.endPacketVarShort();
		session.write(stream);
	}

	/*
	 * sets the pane interface
	 */
	public void sendWindowsPane(int id, int type) {
		int[] xteas = new int[4];
		player.getInterfaceManager().setWindowsPane(id);
		OutputStream stream = new OutputStream(20);
		stream.writePacket(player, 16);
		stream.writeInt(xteas[2]);
		stream.writeIntV2(xteas[0]);
		stream.writeInt(xteas[3]);
		stream.writeIntLE(xteas[1]);
		stream.writeShort(id);
		stream.writeByte128(type);
		session.write(stream);
	}

	public void sendPlayerOption(String option, int slot, boolean top) {
		sendPlayerOption(option, slot, top, -1);
	}

	public void sendPublicMessage(Player p, PublicChatMessage message) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarByte(player, 135);
		stream.writeShort(p.getIndex());
		stream.writeShort(message.getEffects());
		stream.writeByte(p.getMessageIcon());
		if (message instanceof QuickChatMessage) {
			QuickChatMessage qcMessage = (QuickChatMessage) message;
			stream.writeShort(qcMessage.getFileId());
			if (qcMessage.getMessage(false) != null)
				stream.writeBytes(message.getMessage(false).getBytes());
		} else {
			byte[] chatStr = new byte[250];
			chatStr[0] = (byte) message.getMessage(player.isFilteringProfanity()).length();
			int offset = 1 + Huffman.encryptMessage(1, message.getMessage(player.isFilteringProfanity())
					.length(), chatStr, 0, message.getMessage(player.isFilteringProfanity()).getBytes());
			stream.writeBytes(chatStr, 0, offset);
		}
		stream.endPacketVarByte();
		session.write(stream);
	}

	public void sendPlayerOption(String option, int slot, boolean top,
			int cursor) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarByte(player, 36);
		stream.writeByte128(top ? 1 : 0);
		stream.writeByte(slot);
		stream.writeShort128(cursor);
		stream.writeString(option);
		stream.endPacketVarByte();
		session.write(stream);
	}

	/*
	 * sends local players update
	 */
	public void sendLocalPlayersUpdate() {
		session.write(player.getLocalPlayerUpdate().createPacketAndProcess());
	}

	/*
	 * sends local npcs update
	 */
	public void sendLocalNPCsUpdate() {
		session.write(player.getLocalNPCUpdate().createPacketAndProcess());
	}

	public void sendGraphics(Graphics graphics, Object target) {
		OutputStream stream = new OutputStream(13);
		int hash = 0;
		if (target instanceof Player) {
			Player p = (Player) target;
			hash = p.getIndex() & 0xffff | 1 << 28;
		} else if (target instanceof NPC) {
			NPC n = (NPC) target;
			hash = n.getIndex() & 0xffff | 1 << 29;
		} else {
			WorldTile tile = (WorldTile) target;
			hash = tile.getPlane() << 28 | tile.getX() << 14 | tile.getY()
					& 0x3fff | 1 << 30;
		}
		stream.writePacket(player, 61);
		stream.writeShort128(graphics.getHeight());
		stream.writeByteC(graphics.getSettings2Hash());
		stream.writeIntV1(hash);
		stream.writeShort(graphics.getId());
		stream.writeByte128(0); // slot id used for entitys
		stream.writeShort128(graphics.getSpeed());
		session.write(stream);
	}

	public void sendDelayedGraphics(Graphics graphics, int delay, WorldTile tile) {

	}

	public void closeInterface(int windowComponentId) {
		closeInterface(
				player.getInterfaceManager().getTabWindow(windowComponentId),
				windowComponentId);
		player.getInterfaceManager().removeTab(windowComponentId);
	}

	public void closeInterface(int windowId, int windowComponentId) {
		OutputStream stream = new OutputStream(5);
		stream.writePacket(player, 39);
		stream.writeIntLE(windowId << 16 | windowComponentId);
		session.write(stream);
	}

	
	public void sendNPCInterface(NPC npc, boolean nocliped, int windowId, int windowComponentId, int interfaceId) {
		int[] xteas = new int[4];
		OutputStream stream = new OutputStream(26);
		stream.writePacket(player, 127);
		stream.writeShort128(npc.getIndex());
		stream.writeIntV1(windowId << 16 | windowComponentId);
		stream.writeShortLE(interfaceId);
		stream.writeByte(nocliped ? 1 : 0);
		stream.writeIntV2(xteas[0]);
		stream.writeIntV1(xteas[1]);
		stream.writeInt(xteas[3]);
		stream.writeIntV1(xteas[2]);
		session.write(stream);
	}
	
	public void sendPlayerInterface(Player player, boolean nocliped, int windowId, int windowComponentId, int interfaceId) {
		int[] xteas = new int[4];
		OutputStream stream = new OutputStream(30);
		stream.writePacket(player, 80);
		stream.writeIntV2(player.getTileHash()); // the hash for coords,
		stream.writeIntV1(xteas[3]);
		stream.writeShortLE(interfaceId);
		stream.writeShort(player.getIndex());
		stream.writeIntLE(xteas[1]);
		stream.writeByte128(nocliped ? 1 : 0);
		stream.writeIntLE((windowId << 16) | windowComponentId);
		stream.writeInt(xteas[2]);
		stream.writeInt(xteas[0]);
		session.write(stream);
	}
	
	public void sendObjectInterface(WorldObject object, boolean nocliped, int windowId, int windowComponentId, int interfaceId) {
		int[] xteas = new int[4];
		OutputStream stream = new OutputStream(33);
		stream.writePacket(player, 126);
		stream.writeInt((windowId << 16) | windowComponentId);
		stream.writeIntV1(xteas[0]);
		stream.writeIntV2(object.getTileHash()); // the hash for coords,
		stream.write128Byte(object.getObjectHash());
		stream.writeShort128(interfaceId);
		stream.writeIntV1(xteas[2]);
		stream.writeIntLE(xteas[3]);
		stream.writeIntV1(xteas[1]);
		stream.writeByte(nocliped ? 1 : 0);
		stream.writeIntV1(object.getId());
		session.write(stream);
	}
	
	public void sendInterface(boolean nocliped, int windowId,
			int windowComponentId, int interfaceId) {
		// currently fixes the inter engine.. not ready for same component
		// ids(tabs), different inters
		if (!(windowId == 752 && (windowComponentId == 9 || windowComponentId == 12))) { // if
																							// chatbox
			if (player.getInterfaceManager().containsInterface(
					windowComponentId, interfaceId))
				closeInterface(windowComponentId);
			if (!player.getInterfaceManager().addInterface(windowId,
					windowComponentId, interfaceId)) {
				Logger.log(this, "Error adding interface: " + windowId + " , "
						+ windowComponentId + " , " + interfaceId);
				return;
			}
		}
		int[] xteas = new int[4];
		OutputStream stream = new OutputStream(24);
		stream.writePacket(player, 89);
		stream.writeIntLE(xteas[1]);
		stream.writeIntV1(windowId << 16 | windowComponentId);
		stream.writeIntV1(xteas[3]);
		stream.writeIntLE(xteas[2]);
		stream.writeIntV2(xteas[0]);
		stream.writeByte(nocliped ? 1 : 0);
		stream.writeShort(interfaceId);
		session.write(stream);
	}

	public void sendSystemUpdate(int delay) {
		OutputStream stream = new OutputStream(3);
		stream.writePacket(player, 41);
		stream.writeShort((int) (delay * 1.6));
		session.write(stream);
	}

	public void sendUpdateItems(int key, ItemsContainer<Item> items, int... slots) {
		sendUpdateItems(key, items.getItems(), slots);
	}

	public void sendUpdateItems(int key, Item[] items, int... slots) {
		sendUpdateItems(key, key < 0, items, slots);
	}

	public void sendUpdateItems(int key, boolean negativeKey, Item[] items,
			int... slots) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 117);
		stream.writeShort(key);
		stream.writeByte(negativeKey ? 1 : 0);
		for (int slotId : slots) {
			if (slotId >= items.length)
				continue;
			stream.writeSmart(slotId);
			int id = -1;
			int amount = 0;
			Item item = items[slotId];
			if (item != null) {
				id = item.getId();
				amount = item.getAmount();
			}
			stream.writeShort(id + 1);
			if (id != -1) {
				stream.writeByte(amount >= 255 ? 255 : amount);
				if (amount >= 255)
					stream.writeInt(amount);
			}
		}
		stream.endPacketVarShort();
		session.write(stream);
	}

	public void sendGlobalString(int id, String string) {
		if(string.length() <= 253)
			writeGlobalString1(id, string);
		else
			writeGlobalString2(id, string);
	}
	
	public void writeGlobalString2(int id, String string) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 119);
		stream.writeShort(id);
		stream.writeString(string);
		stream.endPacketVarShort();
		session.write(stream);
	}
	
	public void writeGlobalString1(int id, String string) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarByte(player, 13);
		stream.writeString(string);
		stream.writeShort(id);
		stream.endPacketVarByte();
		session.write(stream);
	}

	public void sendItems(int key, ItemsContainer<Item> items) {
		sendItems(key, key < 0, items);
	}

	public void sendItems(int key, boolean negativeKey, ItemsContainer<Item> items) {
		sendItems(key, negativeKey, items.getItems());
	}

	public void sendItems(int key, Item[] items) {
		sendItems(key, key < 0, items);
	}

	public void resetItems(int key, boolean negativeKey, int size) {
		sendItems(key, negativeKey, new Item[size]);
	}
	
	public void sendItems(int key, boolean negativeKey, Item[] items) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 72);
		stream.writeShort(key); //negativeKey ? -key : key
		stream.writeByte(negativeKey ? 1 : 0);
		stream.writeShort(items.length);
		for (int index = 0; index < items.length; index++) {
			Item item = items[index];
			int id = -1;
			int amount = 0;
			if (item != null) {
				id = item.getId();
				amount = item.getAmount();
			}
			stream.writeByte(amount >= 255 ? 255 : amount);
			if (amount >= 255)
				stream.writeInt(amount);
			stream.writeShort(id + 1);
		}
		stream.endPacketVarShort();
		session.write(stream);
	}

	public void sendLogout(boolean lobby) {
		//Highscores.highscores(player, null);
		OutputStream stream = new OutputStream();
		stream.writePacket(player, lobby ? 65 : 104);
		ChannelFuture future = session.write(stream);
		if (future != null)
			future.addListener(ChannelFutureListener.CLOSE);
		else
			session.getChannel().close();
	}
	
	
	public void sendInventoryMessage(int border, int slotId, String message) {
		sendGameMessage(message);
		sendRunScript(948, border, slotId, message);
	}
	
	public void sendNPCMessage(int border, int color,  NPC npc, String message) {
		sendGameMessage(message);
		sendGlobalString(306, message);
		sendGlobalConfig(1699, color);
		sendGlobalConfig(1700, border);
		sendGlobalConfig(1695, 1);
		sendNPCInterface(npc, true, 746, 0, 1177);
	}
	
	public void sendObjectMessage(int border, int color, WorldObject object, String message) {
		sendGameMessage(message);
		sendGlobalString(306, message);
		sendGlobalConfig(1699, color);
		sendGlobalConfig(1700, border);
		sendGlobalConfig(1695, 1);
		sendObjectInterface(object, true, 746, 0, 1177);
	}
	
	public void sendGameMessage(String text) {
		sendGameMessage(text, false);
	}

	public void sendGameMessage(String text, boolean filter) {
		sendMessage(filter ? 109 : 0, text, null);
	}

	public void sendPanelBoxMessage(String text) {
		sendMessage(player.getRights() == 2 ? 99 : 0, text, null);
	}

	public void sendTradeRequestMessage(Player p) {
		sendMessage(100, "wishes to trade with you.", p);
	}

	public void sendClanWarsRequestMessage(Player p) {
		sendMessage(101, "wishes to challenge your clan to a clan war.", p);
	}

	public void sendDuelChallengeRequestMessage(Player p, boolean friendly) {
		sendMessage(101, "wishes to duel with you("
				+ (friendly ? "friendly" : "stake") + ").", p);
	}

	public void sendMessage(int type, String text, Player p) {
		int maskData = 0;
		if (p != null) {
			maskData |= 0x1;
			if (p.hasDisplayName())
				maskData |= 0x2;
		}
		OutputStream stream = new OutputStream();
		stream.writePacketVarByte(player, 51);
		stream.writeSmart(type);
		stream.writeInt(player.getTileHash()); // junk, not used by client
		stream.writeByte(maskData);
		if ((maskData & 0x1) != 0) {
			stream.writeString(p.getDisplayName());
			if (p.hasDisplayName())
				stream.writeString(Utils.formatPlayerNameForDisplay(p
						.getUsername()));
		}
		stream.writeString(text);
		stream.endPacketVarByte();
		session.write(stream);
	}

	// effect type 1 or 2(index4 or index14 format, index15 format unusused by
	// jagex for now)
	public void sendSound(int id, int delay, int effectType) {
		if (effectType == 1)
			sendIndex14Sound(id, delay);
		else if (effectType == 2)
			sendIndex15Sound(id, delay);
	}

	public void sendVoice(int id) {
		resetSounds();
		sendSound(id, 0, 2);
	}

	public void resetSounds() {
		OutputStream stream = new OutputStream(1);
		stream.writePacket(player, 101);
		session.write(stream);
	}

	public void sendIndex14Sound(int id, int delay) {
		OutputStream stream = new OutputStream(9);
		stream.writePacket(player, 15);
		stream.writeShort(id);
		stream.writeByte(1);//repeated amount
		stream.writeShort(delay);
		stream.writeByte(255);
		stream.writeShort(256);
		session.write(stream);
	}

	public void sendIndex15Sound(int id, int delay) {
		OutputStream stream = new OutputStream(7);
		stream.writePacket(player, 57);
		stream.writeShort(id);
		stream.writeByte(1); // amt of times it repeats
		stream.writeShort(delay);
		stream.writeByte(255); // volume
		session.write(stream);
	}

	public void sendMusicEffect(int id) {
		OutputStream stream = new OutputStream(7);
		stream.writePacket(player, 53);
		stream.writeShort128(id);
		stream.write128Byte(255); // volume
		stream.write24BitInteger(0);
		session.write(stream);
	}

	public void sendMusic(int id) {
		sendMusic(id, 100, 255);
	}

	public void sendMusic(int id, int delay, int volume) {
		OutputStream stream = new OutputStream(5);
		stream.writePacket(player, 147);
		stream.writeShortLE(id);
		stream.writeByte128(delay);
		stream.write128Byte(volume);
		session.write(stream);
	}

	public void sendSkillLevel(int skill) {
		OutputStream stream = new OutputStream(7);
		stream.writePacket(player, 45);
		stream.writeIntV2((int) player.getSkills().getXp(skill));
		stream.write128Byte(player.getSkills().getLevel(skill));
		stream.writeByteC(skill);
		session.write(stream);
	}

	// CUTSCENE PACKETS START

	/**
	 * This will blackout specified area.
	 * 
	 * @param byte area = area which will be blackout (0 = unblackout; 1 =
	 *        blackout orb; 2 = blackout map; 5 = blackout orb and map)
	 */
	public void sendBlackOut(int area) {
		OutputStream stream = new OutputStream(2);
		stream.writePacket(player, 90);
		stream.writeByte(area);
		session.write(stream);
	}

	// instant
	public void sendCameraLook(int viewLocalX, int viewLocalY, int viewZ) {
		sendCameraLook(viewLocalX, viewLocalY, viewZ, -1, -1);
	}

	public void sendCameraLook(int viewLocalX, int viewLocalY, int viewZ,
			int speed1, int speed2) {
		OutputStream stream = new OutputStream(7);
		stream.writePacket(player, 29);
		stream.writeByte128(speed2);
		stream.writeByte128(viewLocalX);
		stream.writeByteC(speed1);
		stream.writeByte(viewLocalY);
		stream.writeShort128(viewZ >> 2);
		session.write(stream);
	}
	
	public void sendCameraPos(int moveLocalX, int moveLocalY, int moveZ) {
		sendCameraPos(moveLocalX, moveLocalY, moveZ, -1, -1);
	}
	
	public void sendCameraPos(int moveLocalX, int moveLocalY, int moveZ,
			int speed1, int speed2) {
		OutputStream stream = new OutputStream(7);
		stream.writePacket(player, 86);
		stream.writeByte128(speed1);
		stream.write128Byte(moveLocalY);
		stream.writeShort128(moveZ >> 2);
		stream.writeByte(speed2);
		stream.writeByte(moveLocalX);
		session.write(stream);
	}

	public void sendResetCamera() {
		OutputStream stream = new OutputStream(1);
		stream.writePacket(player, 96);
		session.write(stream);
	}

	public void sendCameraRotation(int x, int y) {
		OutputStream stream = new OutputStream(5);
		stream.writePacket(player, 35);
		stream.writeShort128(x);
		stream.writeShort(y);
		session.write(stream);
	}
	
	public void sendClientConsoleCommand(String command) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarByte(player, 38);
		stream.writeString(command);
		stream.endPacketVarByte();
		session.write(stream);
	}
	
	public void sendOpenURL(String url) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarShort(player, 91);
		stream.writeByte(0);
		stream.writeString(url);
		stream.endPacketVarShort();
		session.write(stream);
	}
	
	
	
	public void sendSetMouse(String walkHereReplace, int cursor) {
		OutputStream stream = new OutputStream();
		stream.writePacketVarByte(player, 52);
		stream.writeString(walkHereReplace);
		stream.writeShort(cursor);
		stream.endPacketVarByte();
		session.write(stream);
	}

	public void sendItemsLook() {
		//currently disabled
		/*OutputStream stream = new OutputStream(2);
		stream.writePacket(player, 159);
		stream.writeByte(player.isOldItemsLook() ? 1 : 0);
		//session.write(stream);*/
	}
}














	private static final byte[] PACKET_SIZES = new byte[110];

	private final static int WALKING_PACKET = 72;
	private final static int MINI_WALKING_PACKET = 78;
	private final static int AFK_PACKET = -1;
	public final static int ACTION_BUTTON1_PACKET = 38;
	public final static int ACTION_BUTTON2_PACKET = 46;
	public final static int ACTION_BUTTON3_PACKET = 14;
	public final static int ACTION_BUTTON4_PACKET = 16;
	public final static int ACTION_BUTTON5_PACKET = 98;
	public final static int ACTION_BUTTON6_PACKET = 102;
	public final static int ACTION_BUTTON7_PACKET = 57;
	public final static int ACTION_BUTTON8_PACKET = 30;
	public final static int ACTION_BUTTON9_PACKET = 41;
	public final static int WORLD_MAP_CLICK = 49;
	public final static int ACTION_BUTTON10_PACKET = 39;
	public final static int RECEIVE_PACKET_COUNT_PACKET = -1;
	private final static int MAGIC_ON_ITEM_PACKET = -1;
	private final static int PLAYER_OPTION_4_PACKET = 108;
	private final static int PLAYER_OPTION_6_PACKET = 87;
	private final static int MOVE_CAMERA_PACKET = 74;
	private final static int INTERFACE_ON_OBJECT = 51;
	private final static int CLICK_PACKET = 9;
	private final static int MOUVE_MOUSE_PACKET = -1;
	private final static int KEY_TYPED_PACKET = 56;
	private final static int CLOSE_INTERFACE_PACKET = 17;
	private final static int COMMANDS_PACKET = 37;
	private final static int ITEM_ON_INTERFACE_PACKET = 13;
	private final static int IN_OUT_SCREEN_PACKET = 100;
	private final static int DONE_LOADING_REGION_PACKET = 95;
	private final static int PING_PACKET = 20;
	private final static int SCREEN_PACKET = 50;
	private final static int CHAT_TYPE_PACKET = 65;
	private final static int CHAT_PACKET = 31;
	private final static int PUBLIC_QUICK_CHAT_PACKET = 83;
	private final static int ADD_FRIEND_PACKET = 26;
	private final static int ADD_IGNORE_PACKET = 75;
	private final static int REMOVE_FRIEND_PACKET = 52;
	private final static int REMOVE_IGNORE_PACKET = 79;
	private final static int JOIN_FRIEND_CHAT_PACKET = 7;
	private final static int CHANGE_FRIEND_CHAT_PACKET = 8;
	private final static int KICK_FRIEND_CHAT_PACKET = 66;
	private final static int SEND_FRIEND_MESSAGE_PACKET = 84;
	private final static int SEND_FRIEND_QUICK_CHAT_PACKET = 42;
	private final static int OBJECT_CLICK1_PACKET = 73;
	private final static int OBJECT_CLICK2_PACKET = 25;
	private final static int OBJECT_CLICK3_PACKET = 40;
	private final static int OBJECT_CLICK4_PACKET = 47;
	private final static int OBJECT_CLICK5_PACKET = -1;
	private final static int OBJECT_EXAMINE_PACKET = 24;
	private final static int NPC_CLICK1_PACKET = 99;
	private final static int NPC_CLICK2_PACKET = 77;
	private final static int NPC_CLICK3_PACKET = 21;
	private final static int ATTACK_NPC = 15;
	private final static int PLAYER_OPTION_1_PACKET = 62;
	private final static int PLAYER_OPTION_2_PACKET = 64;
	private final static int ITEM_TAKE_PACKET = 59;
	private final static int DIALOGUE_CONTINUE_PACKET = 44;
	private final static int ENTER_INTEGER_PACKET = 58;
	private final static int ENTER_NAME_PACKET = 53;
	private final static int ENTER_LONG_TEXT_PACKET = 54;
	private final static int INTERFACE_ON_INTERFACE_PACKET = 0;
	private final static int INTERFACE_ON_PLAYER = 76;
	private final static int INTERFACE_ON_NPC = 85;
	private final static int COLOR_ID_PACKET = -1;
	private static final int NPC_EXAMINE_PACKET = 60;
	private final static int REPORT_ABUSE_PACKET = -1;








http://uppit.com/phpaorshz2ko/Impression_614_client_releaset.zip